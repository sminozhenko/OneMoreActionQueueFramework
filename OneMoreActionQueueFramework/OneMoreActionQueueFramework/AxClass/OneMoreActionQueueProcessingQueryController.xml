<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OneMoreActionQueueProcessingQueryController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Action queue query processing controller
/// </summary>
class OneMoreActionQueueProcessingQueryController extends SysOperationServiceController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        this.parmClassName(classStr(OneMoreActionQueueProcessingService));
        this.parmMethodName(methodStr(OneMoreActionQueueProcessingService, processQuery));
        this.parmExecutionMode(SysOperationExecutionMode::Synchronous);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Main
    /// </summary>
    /// <param name = "_args">Arguments</param>
    public static void main(Args _args)
    {
        OneMoreActionQueueProcessingQueryController::newFromArgs(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct <c>OneMoreActionQueueProcessingQueryController</c>
    /// </summary>
    /// <returns>Created <c>OneMoreActionQueueProcessingQueryController</c> object</returns>
    public static OneMoreActionQueueProcessingQueryController construct()
    {
        return new OneMoreActionQueueProcessingQueryController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// New from arguments
    /// </summary>
    /// <param name = "_args">Arguments</param>
    /// <returns>New class</returns>
    public static OneMoreActionQueueProcessingQueryController newFromArgs(Args _args)
    {
        OneMoreActionQueueProcessingQueryController     ret = OneMoreActionQueueProcessingQueryController::construct();
    
        ret.initializeFromArgs(_args);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Can be overridden to inidicate that the operation supports running in a different, non interactive
    /// session than the one from which it was launched
    /// from the client
    /// </summary>
    /// <returns>If true operation will be run synchrnously in an non GUI async session</returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeOperation</Name>
				<Source><![CDATA[
    protected void beforeOperation(SysOperationExecutionMode _executionMode)
    {
        OneMoreActionQueueProcessingQueryContract contract = this.getDataContractObject() as OneMoreActionQueueProcessingQueryContract;

        Query                   q = contract.getQuery();

        QueryBuildDataSource    qbdsActionQueue = q.dataSourceTable(tableNum(OneMoreActionQueue));
        QueryBuildDataSource    qbdsActionQueueTypeTable = qbdsActionQueue.addDataSource(tableNum(OneMoreActionQueueTypeTable));

        qbdsActionQueueTypeTable.relations(true);
        qbdsActionQueueTypeTable.joinMode(JoinMode::ExistsJoin);

        qbdsActionQueueTypeTable.addRange(fieldNum(OneMoreActionQueueTypeTable, Enabled)).value(queryValue(NoYes::Yes));
        qbdsActionQueueTypeTable.addRange(fieldNum(OneMoreActionQueueTypeTable, ProcessingType)).value(queryValue(OneMoreActionQueueProcessingType::BatchJob));

        contract.setQuery(q);

        super(_executionMode);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>