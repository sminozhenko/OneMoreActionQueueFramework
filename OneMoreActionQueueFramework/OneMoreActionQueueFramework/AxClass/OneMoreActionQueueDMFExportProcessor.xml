<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OneMoreActionQueueDMFExportProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Action queue processor class for DMF export type
/// </summary>
[
    OneMoreActionQueueProcessorAttribute(classStr(OneMoreActionQueueDMFExportContract), true),
    OneMoreActionQueueProcessorBusinessEventAttribute(classStr(OneMoreActionQueueDMFExportBusinessEvent))
]
class OneMoreActionQueueDMFExportProcessor extends OneMoreActionQueueProcessor
{
    OneMoreActionQueueDMFExportContract  localContract;
        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Initialize</Name>
				<Source><![CDATA[
    public void Initialize()
    {
        super();

        localContract = contract as OneMoreActionQueueDMFExportContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runActionInternal</Name>
				<Source><![CDATA[
    public void runActionInternal()
    {
        DMFDefinitionGroupName definitionGroupName = strFmt('%1_%2', this.parmOneMoreActionQueueTypeTable().TypeId, newGuid());
        OneMoreActionQueueTypeDMFExportParameterTable oneMoreActionQueueTypeDMFExportParameterTable = this.parmOneMoreActionQueueTypeTable().oneMoreActionQueueTypeDMFExportParameterTable();
        DMFExecutionId executionId = DMFUtil::generateExecutionId(definitionGroupName);

        try
        {
            #DMF
            
            OneMoreActionQueueContext::oneMoreActionQueueParametersContract = localContract;
            
            info(strFmt("@OneMoreActionQueueFramework:OneMoreActionQueueDMFExportDataProject", definitionGroupName));
            info(strFmt("@OneMoreActionQueueFramework:OneMoreActionQueueDMFExportExecution", executionId));
            
            DMFEntity               dmfEntity = DMFEntity::find(oneMoreActionQueueTypeDMFExportParameterTable.DMFEntityName);

            DMFEntityExporter exporter = new DMFEntityExporter();
            SharedServiceUnitFileID fileId = exporter.exportToFile(dmfEntity.EntityName, definitionGroupName, executionId, oneMoreActionQueueTypeDMFExportParameterTable.DMFSourceName, #FieldGroupName_AllFields, oneMoreActionQueueTypeDMFExportParameterTable.PackedQueryRun, curExt());

            DMFDefinitionGroupExecution dmfDefinitionGroupExecution = DMFDefinitionGroupExecution::find(definitionGroupName, dmfEntity.EntityName, executionId);

            if (dmfDefinitionGroupExecution.TargetStatus == DMFBatchJobStatus::Finished && fileId != '')
            {
                SharedServiceUnitURL    downloadUrl = DMFDataPopulation::getAzureBlobReadUrl(str2Guid(fileId));
                System.Uri              uri = new System.Uri(downloadUrl);
                str                     fileName = System.IO.Path::GetFileName(uri.LocalPath);
                str                     filePath = WinAPIServer::getTempPath() + fileName;
                
                DMFPackageUtil::downloadFileFromUrlV2(downloadUrl, filePath);

                using (System.IO.Stream fileStream = System.IO.File::OpenRead(filePath))
                {
                    var mime = System.Web.MimeMapping::GetMimeMapping(fileName);
                    DocumentManagement::attachFileToCommon(this.parmOneMoreActionQueue(), DocuType::typeFile(), fileStream, fileName, mime, fileName);
                }

                DMFPackageUtil::deleteFileIgnoreError(filePath);
            }
            else
            {
                throw error(strFmt("@OneMoreActionQueueFramework:OneMoreActionQueueDMFExportFailed", definitionGroupName));
            }
        }
        finally
        {
            OneMoreActionQueueContext::oneMoreActionQueueParametersContract = null;

            if (!oneMoreActionQueueTypeDMFExportParameterTable.KeepDataProject)
            {
                ttsbegin;
                
                DMFDefinitionGroup          dmfDefinitionGroup = DMFDefinitionGroup::find(definitionGroupName, true);

                if (dmfDefinitionGroup.RecId != 0)
                {
                    dmfDefinitionGroup.delete();
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>