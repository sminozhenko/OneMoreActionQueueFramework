<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OneMoreActionQueueBusinessEventsCatalogHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// OneMore action queue business events catalog helper
/// </summary>
internal class OneMoreActionQueueBusinessEventsCatalogHelper
{
    private static const str actionQueueBusinessEventIdPrefix = 'OneMoreActionQueue';
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addActionQueueEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes all action queue events into Catalog
    /// </summary>
    internal static void addActionQueueEvents()
    {
        OneMoreActionQueueTypeTable oneMoreActionQueueTypeTable;

        ttsbegin;
        
        while select oneMoreActionQueueTypeTable
        {
            OneMoreActionQueueBusinessEventsCatalogHelper::addActionQueueEvent(oneMoreActionQueueTypeTable);
        }

        ttscommit;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>addActionQueueEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes action queue event into Catalog
    /// </summary>
    /// <param name = "_oneMoreActionQueueTypeTable">An action queue type buffer</param>
    internal static void addActionQueueEvent(OneMoreActionQueueTypeTable _oneMoreActionQueueTypeTable)
    {
        BusinessEventsId businessEventsId = OneMoreActionQueueBusinessEventsCatalogHelper::generateActionQueueBusinessEventId(_oneMoreActionQueueTypeTable.TypeId);

        OneMoreActionQueueBusinessEventsCatalogHelper::validateRecordAndInsert(businessEventsId, classStr(OneMoreActionQueueBusinessEventContract), businessEventsId, literalStr('@OneMoreActionQueueFramework:OneMoreActionQueueBusinessEventTypeDescription'), ModuleAxapta::OneMoreActionQueue, '', '', _oneMoreActionQueueTypeTable.Description ? _oneMoreActionQueueTypeTable.Description : _oneMoreActionQueueTypeTable.TypeId);

    }

]]></Source>
			</Method>
			<Method>
				<Name>generateActionQueueBusinessEventId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a action queue Business Event Id with the given parameters
    /// </summary>
    /// <param name = "_typeId">An <c>OneMoreActionQueueTypeId</c> value</param>
    /// <returns>A action queue Business Event Id</returns>
    internal static str generateActionQueueBusinessEventId(OneMoreActionQueueTypeId _typeId)
    {
        str businessEventId = strFmt('%1_%2', actionQueueBusinessEventIdPrefix, _typeId);
            
        return businessEventId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecordAndInsert</Name>
				<Source><![CDATA[
    //TODO copy of standard method as it's marked as internal
    /// <summary>
    /// This validates a new workflow catalog record and inserts
    /// </summary>
    /// <param name = "_businessEventId">The businessEventId</param>
    /// <param name = "_contractName">The data contract class name as astring</param>
    /// <param name = "_nameLabel">The label id for the name</param>
    /// <param name = "_descriptionLabel">The label id for the description</param>
    /// <param name = "_module">The business events category.</param>
    /// <param name = "_nameParm1">Optional label id for a future additional parameter to the field name.</param>
    /// <param name = "_nameParm2">Optional label id for a future additional parameter to the field name.</param>
    /// <param name = "_descParm1">Optional label id for a future additional parameter to the field Description.</param>
    /// <param name = "_descParm2">Optional label id for a future additional parameter to the field Description.</param>
    /// <returns>Returns true if record haas been inserted. False if not. This is in case some loops need to use continue in the future.</returns>
    internal static boolean validateRecordAndInsert(BusinessEventsId _businessEventId,
        BusinessEventsContractEDT _contractName,
        BusinessEventsName _nameLabel,
        BusinessEventsDescription _descriptionLabel,
        BusinessEventsCategory _module,
        BusinessEventsDescriptionParm1 _nameParm1 = '',
        BusinessEventsDescriptionParm2 _nameParm2 = '',
        BusinessEventsNameParm1 _descParm1 = '',
        BusinessEventsNameParm2 _descParm2 = '')
    {
        BusinessEventsTable businessEventsTable;
        // Catching duplicate key exception instead of checking every record one by one. Logging telemetry and continuing. This should be good enough ad duplication is a very virtual problem here...
        try
        {

            businessEventsTable.BusinessEventId = _businessEventId;
            businessEventsTable.Name = _nameLabel;
            businessEventsTable.Description = _descriptionLabel;
            businessEventsTable.Module = _module;
            businessEventsTable.Contract = _contractName;
            businessEventsTable.NameParam1 = _nameParm1;
            businessEventsTable.NameParam2 = _nameParm2;
            businessEventsTable.DescParam1 = _descParm1;
            businessEventsTable.DescParam2 = _descParm2;
            businessEventsTable.insert();
        }
        catch(Exception::DuplicateKeyException)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>