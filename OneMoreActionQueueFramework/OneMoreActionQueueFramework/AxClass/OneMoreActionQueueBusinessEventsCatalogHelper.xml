<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OneMoreActionQueueBusinessEventsCatalogHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// OneMore action queue business events catalog helper
/// </summary>
internal class OneMoreActionQueueBusinessEventsCatalogHelper
{
    private static const str actionQueueBusinessEventIdPrefix = 'OneMoreActionQueue';
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>BusinessEventsCatalogHelper_onBusinessEventsCatalogRebuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rebuilds the OneMore action queue business events catalog
    /// </summary>>
    [SubscribesTo(classStr(BusinessEventsCatalogHelper), staticDelegateStr(BusinessEventsCatalogHelper, onBusinessEventsCatalogRebuild))]
    public static void BusinessEventsCatalogHelper_onBusinessEventsCatalogRebuild()
    {
        OneMoreActionQueueBusinessEventsCatalogHelper::addActionQueueEvents();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addActionQueueEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes all action queue events into Catalog
    /// </summary>
    internal static void addActionQueueEvents()
    {
        OneMoreActionQueueTypeTable oneMoreActionQueueTypeTable;
        
        while select oneMoreActionQueueTypeTable
        {
            OneMoreActionQueueBusinessEventsCatalogHelper::addActionQueueEvent(oneMoreActionQueueTypeTable);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>addActionQueueEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes action queue event into Catalog
    /// </summary>
    /// <param name = "_oneMoreActionQueueTypeTable">An action queue type buffer</param>
    internal static void addActionQueueEvent(OneMoreActionQueueTypeTable _oneMoreActionQueueTypeTable)
    {
        BusinessEventsId businessEventsId = OneMoreActionQueueBusinessEventsCatalogHelper::generateActionQueueBusinessEventId(_oneMoreActionQueueTypeTable.TypeId);
        ClassName        businessEventClassName = _oneMoreActionQueueTypeTable.businessEventClassName();

        if (businessEventClassName)
        {
            DictClass dc = new DictClass(className2Id(businessEventClassName));

            OneMoreActionQueueBusinessEventAttribute businessEventAttribute = dc.getAttribute(classStr(OneMoreActionQueueBusinessEventAttribute));

            BusinessEventsCatalogHelper::validateRecordAndInsert(
                businessEventsId,
                businessEventAttribute.parmActionQueueBusinessEventClass(),
                _oneMoreActionQueueTypeTable.Description ? _oneMoreActionQueueTypeTable.Description : _oneMoreActionQueueTypeTable.TypeId,
                literalStr('@OneMoreActionQueueFramework:OneMoreActionQueueBusinessEventTypeDescription'),
                ModuleAxapta::OneMoreActionQueue
                );
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>generateActionQueueBusinessEventId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a action queue Business Event Id with the given parameters
    /// </summary>
    /// <param name = "_typeId">An <c>OneMoreActionQueueTypeId</c> value</param>
    /// <returns>A action queue Business Event Id</returns>
    internal static str generateActionQueueBusinessEventId(OneMoreActionQueueTypeId _typeId)
    {
        str businessEventId = strFmt('%1_%2', actionQueueBusinessEventIdPrefix, _typeId);
            
        return businessEventId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActionQueueEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update action queue event
    /// </summary>
    /// <param name = "_oneMoreActionQueueTypeTable">An action queue type buffer</param>
    internal static void updateActionQueueEvent(OneMoreActionQueueTypeTable _oneMoreActionQueueTypeTable)
    {
        BusinessEventsId businessEventsId = OneMoreActionQueueBusinessEventsCatalogHelper::generateActionQueueBusinessEventId(_oneMoreActionQueueTypeTable.TypeId);
        
        BusinessEventsTable businessEventsTable;

        ttsbegin;
        
        //TODO businessEventsTable.find is internal. Extensibility request is created
        select firstonly forupdate businessEventsTable
            where businessEventsTable.BusinessEventId == businessEventsId;

        if (businessEventsTable.RecId != 0)
        {
            businessEventsTable.Name = _oneMoreActionQueueTypeTable.Description ? _oneMoreActionQueueTypeTable.Description : _oneMoreActionQueueTypeTable.TypeId;
            businessEventsTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>