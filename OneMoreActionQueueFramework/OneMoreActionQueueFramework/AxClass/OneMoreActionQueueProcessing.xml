<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OneMoreActionQueueProcessing</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processing class for action queue record
/// </summary>
class OneMoreActionQueueProcessing
{
    OneMoreActionQueue                                      oneMoreActionQueueCaller;
    OneMoreActionQueue                                      oneMoreActionQueueUpd;
    OneMoreActionQueueTypeTable                             oneMoreActionQueueTypeTable;

    int                                                     infologFromLine;    
    boolean                                                 processedSuccessfully;
    UserConnection                                          userConnection;
    System.Exception                                        lastException;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct
    /// </summary>    
    /// <returns><c>OneMoreActionQueueProcessing</c></returns>
    public static OneMoreActionQueueProcessing construct()
    {
        return new OneMoreActionQueueProcessing();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessedSuccessfully</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is processed successfully?
    /// </summary>
    /// <returns>True if the record was processed successfully otherwise false</returns>
    public boolean getProcessedSuccessfully()
    {
        return processedSuccessfully;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOneMoreActionQueue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caller <c>OneMoreActionQueue</c> record
    /// </summary>
    /// <param name = "_oneMoreActionQueueCaller">Caller <c>OneMoreActionQueue</c> record</param>
    /// <returns>Caller <c>OneMoreActionQueue</c> record</returns>
    public OneMoreActionQueue parmOneMoreActionQueue(OneMoreActionQueue _oneMoreActionQueueCaller = oneMoreActionQueueCaller)
    {
        oneMoreActionQueueCaller = _oneMoreActionQueueCaller;
    
        return oneMoreActionQueueCaller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run
    /// </summary>
    public void run()
    {
        setPrefix(strFmt("@OneMoreActionQueueFramework:OneMoreActionQueueProcessingPrefix", oneMoreActionQueueCaller.ActionId));
    
        try
        {
            userConnection = new UserConnection();

            //Start action queue connection transaction
            userConnection.ttsbegin();

            this.runInternal();

            //Commit action queue connection transaction
            userConnection.ttscommit();
        }
        catch
        {
            //Most like issue is related to status update on action queue, do not recover
            this.updateStatus(OneMoreActionQueueStatus::Error, false);
        }
        finally
        {
            //Finalize action queue user connection to prevent user connection leak
            if (userConnection)
            {
                userConnection.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runInternal</Name>
				<Source><![CDATA[
    private void runInternal()
    {
        boolean                     doRetry;
        System.Exception            exception;
        OneMoreActionQueueStatus    newActionQueueStatus;
        
        this.initializeOneMoreActionQueueUpd();

        //In process or already processed
        if (!this.checkActionQueue())
        {
            return;
        }

        this.initUpdate();

        OneMoreActionQueueProcessor processor;

        try
        {
            infologFromLine = infologLine();

            //Global flag
            OneMoreActionQueueContext::doRetryFlag = false;
        
            processor = OneMoreActionQueueProcessor::newFromOneMoreActionQueue(oneMoreActionQueueUpd);
            processor.runAction();
    
            newActionQueueStatus = OneMoreActionQueueStatus::Processed;

            processedSuccessfully = true;
        }
        catch (exception)
        {
            doRetry = this.isExceptionRecoverable(exception);
            lastException = exception;
            newActionQueueStatus = OneMoreActionQueueStatus::Error;
        }

        //Update action queue record with additiona information from contract
        if (processor)
        {
            OneMoreActionQueueContract contract = processor.getContract();

            if (contract)
            {
                oneMoreActionQueueUpd.CompanyId = contract.parmDataAreaId();
            }
        }

        this.updateStatus(newActionQueueStatus, doRetry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExceptionRecoverable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if exception is recoverable and retry is needed
    /// </summary>
    /// <param name = "_exception">An <c>System.Exception</c> object</param>
    /// <returns>True if exception si recoverable otherwise False</returns>
    protected boolean isExceptionRecoverable(System.Exception _exception)
    {
        boolean     ret;

        if (   _exception is Microsoft.Dynamics.Ax.Xpp.DeadlockException
            || _exception is Microsoft.Dynamics.Ax.Xpp.UpdateConflictException
            || _exception is Microsoft.Dynamics.Ax.Xpp.UpdateConflictNotRecoveredException
            || _exception is Microsoft.Dynamics.Ax.Xpp.DuplicateKeyException
            || _exception is Microsoft.Dynamics.Ax.Xpp.DuplicateKeyNotRecoveredException
            || _exception is Microsoft.Dynamics.Ax.Xpp.MaximumRetryCountExceededException
           )
        {
            ret = true;
        }
        else
        {
            ret = OneMoreActionQueueContext::doRetryFlag;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeOneMoreActionQueueUpd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize <c>OneMoreActionQueue</c> for update
    /// </summary>
    private void initializeOneMoreActionQueueUpd()
    {
        //Apply pessimistic concurency model to avoid double-processing of the same action at the same time
        oneMoreActionQueueUpd.readPast(true);
        oneMoreActionQueueUpd.selectForUpdate(true);
        oneMoreActionQueueUpd.setConnection(userConnection);

        select firstonly oneMoreActionQueueUpd
            where oneMoreActionQueueUpd.RecId  ==  oneMoreActionQueueCaller.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkActionQueue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check action queue readiness
    /// </summary>
    /// <returns>Returns true if action queue is ready for processing otherwise False</returns>
    protected boolean checkActionQueue()
    {
        boolean     ret = true;

        if (oneMoreActionQueueUpd.RecId == 0)
        {
            warning("@OneMoreActionQueueFramework:OneMoreActionQueueRecordIsInProcessOrDoesNotExist");
            ret = false;
        }
    
        if (ret && oneMoreActionQueueUpd.Status != OneMoreActionQueueStatus::Waiting)
        {
            warning(strFmt("@OneMoreActionQueueFramework:OneMoreActionQueueRecordShouldBeInStatus", OneMoreActionQueueStatus::Waiting));
            ret = false;
        }

    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize variables
    /// </summary>
    protected void initUpdate()
    {
        oneMoreActionQueueTypeTable = oneMoreActionQueueUpd.oneMoreActionQueueTypeTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update status
    /// </summary>
    /// <param name = "_status">New status</param>
    /// <param name = "_doRetry">Do retry in case if new status is Error</param>
    protected void updateStatus(OneMoreActionQueueStatus _status, boolean _doRetry = true)
    {
        boolean doStatusUpdate = true;
        
        if (_doRetry && this.useRetry() && _status == OneMoreActionQueueStatus::Error)
        {
            oneMoreActionQueueUpd.RetryCount += 1;

            if (oneMoreActionQueueUpd.RetryCount < this.maxRetryCount())
            {
                doStatusUpdate = false;

                this.doRetryLogic();
            }
        }

        if (doStatusUpdate)
        {
            oneMoreActionQueueUpd.Status    = _status;

            //Invoke Business Event if status changes to processed or error
            //TODO send should be performed in user connection context
            OneMoreActionQueueBusinessEvent::construct(oneMoreActionQueueUpd, oneMoreActionQueueTypeTable).send();
        }

        InfologData infologData = this.getInfoLogData();

        oneMoreActionQueueUpd.ProcessingNotes = '';

        if (infologData != conNull())
        {
            oneMoreActionQueueUpd.ProcessingNotes = this.getInfoLogText(infologData);
        }
    
        oneMoreActionQueueUpd.update();

        OneMoreActionQueueLogTable::addInfoLogData(oneMoreActionQueueUpd, lastException != null ? lastException.GetType().FullName : '', infologData, userConnection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInfoLogData</Name>
				<Source><![CDATA[
    private InfologData getInfoLogData()
    {
        int             currentLine = infologLine();
        InfologData     ret;
       
        if (currentLine > infologFromLine)
        {
            ret = infolog.copy(infologFromLine + 1,  currentLine);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInfoLogText</Name>
				<Source><![CDATA[
    private InfologText getInfoLogText(InfologData _infologData)
    {
        System.Text.StringBuilder   logStr = new System.Text.StringBuilder();

        SysInfologEnumerator infoEnumerator = SysInfologEnumerator::newData(_infologData);

        while (infoEnumerator.moveNext())
        {
            SysInfologMessageStruct infoMessageStruct = SysInfologMessageStruct::construct(infoEnumerator.currentMessage());

            int p = infoMessageStruct.prefixDepth();

            for (int i = 1; i <= p; i++)
            {
                logStr.Append(infoMessageStruct.preFixTextElement(i) + '. ');
            }

            logStr.AppendLine(infoMessageStruct.message());
        }

        return logStr.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useRetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Use retries
    /// </summary>
    /// <returns>True if processing is using retries otherwise false</returns>
    protected boolean useRetry()
    {
        //Do retry only if error is recoverable (static doRecover = true), processing type is not Syncronious and number of retries is set up for action queue type
        return oneMoreActionQueueTypeTable.ProcessingType != OneMoreActionQueueProcessingType::Synchronous && oneMoreActionQueueTypeTable.RetryAttemptNumber != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxRetryCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maximum retry count
    /// </summary>
    /// <returns>Maxumum number of retries</returns>
    protected int maxRetryCount()
    {
        return oneMoreActionQueueTypeTable.RetryAttemptNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRetryLogic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do retry logic
    /// </summary>
    protected void doRetryLogic()
    {
        OneMoreActionQueueRetryAttemptInterval retryAttemptInterval = oneMoreActionQueueTypeTable.RetryAttemptInterval;

        if (!retryAttemptInterval)
        {
            retryAttemptInterval = OneMoreActionQueueConstants::defaultRetryAttemptInterval;
        }

        switch (oneMoreActionQueueTypeTable.ProcessingType)
        {
            case OneMoreActionQueueProcessingType::ReliableAsynchronous:
                OneMoreActionQueueProcessing::processActionQueueInController(oneMoreActionQueueUpd, oneMoreActionQueueTypeTable, SysOperationExecutionMode::ReliableAsynchronous, retryAttemptInterval);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processActionQueueInController</Name>
				<Source><![CDATA[
    private static void processActionQueueInController(OneMoreActionQueue _oneMoreActionQueue, OneMoreActionQueueTypeTable _oneMoreActionQueueTypeTable, SysOperationExecutionMode _sysOperationExecutionMode, OneMoreActionQueueRetryAttemptInterval _retryAttemptInterval = 0)
    {
        SysOperationServiceController               controller = new SysOperationServiceController(classStr(OneMoreActionQueueProcessingService), methodStr(OneMoreActionQueueProcessingService, processActionQueueRecord));

        OneMoreActionQueueProcessingSingleContract  contract = controller.getDataContractInfoObject().dataContractObject() as OneMoreActionQueueProcessingSingleContract;

        contract.parmActionQueueRecId(_oneMoreActionQueue.RecId);

        // Do not show the dialog and process the request directly.
        controller.parmShowDialog(false);

        // Set the caption as it is used as the reliable async batch job name.
        LabelType dialogCaption;

        if (_oneMoreActionQueueTypeTable.Description)
        {
            dialogCaption = strFmt('%1 (%2)', _oneMoreActionQueueTypeTable.Description, _oneMoreActionQueue.ActionId);
        }
        else
        {
            dialogCaption = strfmt("@OneMoreActionQueueFramework:OneMoreActionQueueRunAction", _oneMoreActionQueue.ActionId);
        }

        controller.parmDialogCaption(dialogCaption);

        controller.parmExecutionMode(_sysOperationExecutionMode);

        switch (_sysOperationExecutionMode)
        {
            case SysOperationExecutionMode::ReliableAsynchronous:
                controller.parmReliableAsyncBatchGroupId(_oneMoreActionQueueTypeTable.ReliableAsyncBatchGroupId);
                
                BatchInfo batchInfo = controller.batchInfo();
                batchInfo.parmBatchHeader().parmStartDateTime(DateTimeUtil::addSeconds(batchInfo.parmBatchHeader().parmStartDateTime(), _retryAttemptInterval));
                
                if (_oneMoreActionQueueTypeTable.RunAsUserId)
                {
                    batchInfo.parmBatchHeader().parmExecutingBy(_oneMoreActionQueueTypeTable.RunAsUserId);
                }
                
                controller.doBatch();
                break;
            default:
                controller.startOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOneMoreActionQueue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process <c>OneMoreActionQueue</c> record
    /// </summary>
    /// <param name = "_oneMoreActionQueueTypeTable"><c>OneMoreActionQueueTypeTable</c> record</param>
    /// <param name = "_oneMoreActionQueue"><c>OneMoreActionQueue</c> record</param>
    /// <param name = "_processingType">An <c>OneMoreActionQueueProcessingType</c> value</param>
    /// <returns><c>OneMoreActionQueueServiceRunActionResponse</c></returns>
    [Hookable(false)]
    public static OneMoreActionQueueServiceRunActionResponse processOneMoreActionQueue(OneMoreActionQueueTypeTable _oneMoreActionQueueTypeTable, OneMoreActionQueue _oneMoreActionQueue, OneMoreActionQueueProcessingType _processingType = _oneMoreActionQueueTypeTable.ProcessingType)
    {
        OneMoreActionQueueResponseType                          responseType = OneMoreActionQueueResponseType::OK;
        str                                                     notes;
        OneMoreActionQueueServiceRunActionResponse              response = new OneMoreActionQueueServiceRunActionResponse();
        
        //If message was added to the queue and processing enabled
        if (_oneMoreActionQueue.RecId != 0)
        {
            if (_oneMoreActionQueueTypeTable.Enabled)
            {
                switch (_processingType)
                {
                    case OneMoreActionQueueProcessingType::ReliableAsynchronous:
                        OneMoreActionQueueProcessing::processActionQueueInController(_oneMoreActionQueue, _oneMoreActionQueueTypeTable, SysOperationExecutionMode::ReliableAsynchronous);
                        break;

                    case OneMoreActionQueueProcessingType::Synchronous:
                        OneMoreActionQueueProcessing::processActionQueueInController(_oneMoreActionQueue, _oneMoreActionQueueTypeTable, SysOperationExecutionMode::Synchronous);

                        _oneMoreActionQueue.reread();

                        switch (_oneMoreActionQueue.Status)
                        {
                            case OneMoreActionQueueStatus::Processed:
                                responseType = OneMoreActionQueueResponseType::OK;
                                notes = _oneMoreActionQueue.ProcessingNotes;
                                break;

                            case OneMoreActionQueueStatus::Error:
                                throw error(_oneMoreActionQueue.ProcessingNotes);

                            default:
                                throw error("@OneMoreActionQueueFramework:OneMoreActionQueueUnknownError");
                        }
                        break;
                }
            }
            else
            {
                notes = strFmt("@OneMoreActionQueueFramework:OneMoreActionQueueActionTypeIsNotEnabled", _oneMoreActionQueueTypeTable.TypeId);
                responseType = OneMoreActionQueueResponseType::Warning;
            }
        }

        response.parmResponseType(responseType);
        response.parmNotes(notes);

        return response;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>