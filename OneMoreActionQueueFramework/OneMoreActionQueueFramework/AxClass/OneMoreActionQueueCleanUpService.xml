<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OneMoreActionQueueCleanUpService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Service class for action queue clean-up operation
/// </summary>
class OneMoreActionQueueCleanUpService extends SysOperationServiceBase
{
    private     RecordInsertList                oneMoreActionQueueCleanUpTmpRIL;
    protected   OneMoreActionQueueCleanUpTmp    oneMoreActionQueueCleanUpTmp;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clean-up action queue
    /// </summary>
    /// <param name = "_contract">An <c>OneMoreActionQueueCleanUpContract</c></param>
    [Hookable(false)]
    public void cleanUp(OneMoreActionQueueCleanUpContract _contract)
    {
        OneMoreActionQueueTypeTable     oneMoreActionQueueTypeTable;
        
        while select oneMoreActionQueueTypeTable
        {
            int                numberOfRecords;
            OneMoreActionQueue oneMoreActionQueue;
            int                totalDeletedRecords;
            
            oneMoreActionQueueTypeTable.setDefaultRetentionPeriod();

            this.initializeRecordInsertList();

            while select RecId
                from oneMoreActionQueue
                where oneMoreActionQueue.TypeId             == oneMoreActionQueueTypeTable.TypeId
                   && oneMoreActionQueue.CreatedDateTime    < DateTimeUtil::addDays(DateTimeUtil::utcNow(), -oneMoreActionQueueTypeTable.RetentionPeriod)
            {
                oneMoreActionQueueCleanUpTmp.RefRecId = oneMoreActionQueue.RecId;
                oneMoreActionQueueCleanUpTmpRIL.add(oneMoreActionQueueCleanUpTmp);

                numberOfRecords++;
                totalDeletedRecords++;

                if (numberOfRecords >= OneMoreActionQueueConstants::cleanUpBatchSize)
                {
                    numberOfRecords = 0;
                    this.deleteRecordsInternal();
                }
            }

            if (totalDeletedRecords)
            {
                this.deleteRecordsInternal();

                info(strFmt("@OneMoreActionQueueFramework:OneMoreActionQueueNumberOfDeletedRecord", totalDeletedRecords, oneMoreActionQueueTypeTable.TypeId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRecordInsertList</Name>
				<Source><![CDATA[
    private void initializeRecordInsertList()
    {
        oneMoreActionQueueCleanUpTmpRIL = new RecordInsertList(tableNum(OneMoreActionQueueCleanUpTmp), true, true, true, true, true, oneMoreActionQueueCleanUpTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecordsInternal</Name>
				<Source><![CDATA[
    private void deleteRecordsInternal()
    {
        oneMoreActionQueueCleanUpTmpRIL.insertDatabase();

        this.deleteRecords();

        delete_from oneMoreActionQueueCleanUpTmp;
        
        this.initializeRecordInsertList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete data from real tables
    /// </summary>
    protected void deleteRecords()
    {
        OneMoreActionQueue oneMoreActionQueue;

        oneMoreActionQueue.skipDeleteActions(true);
        oneMoreActionQueue.skipDataMethods(true);
        oneMoreActionQueue.skipDatabaseLog(true);
        oneMoreActionQueue.skipEvents(true);

        delete_from oneMoreActionQueue
            exists join oneMoreActionQueueCleanUpTmp
            where oneMoreActionQueueCleanUpTmp.RefRecId == oneMoreActionQueue.RecId;
        
        OneMoreActionQueueLogTable oneMoreActionQueueLogTable;
        
        oneMoreActionQueueLogTable.skipDeleteActions(true);
        oneMoreActionQueueLogTable.skipDataMethods(true);
        oneMoreActionQueueLogTable.skipDatabaseLog(true);
        oneMoreActionQueueLogTable.skipEvents(true);

        delete_from oneMoreActionQueueLogTable
        notexists join oneMoreActionQueue
            where oneMoreActionQueueLogTable.RefRecId == oneMoreActionQueue.RecId;

        DocuRef docuRef;
        
        while select forupdate docuRef
            where docuRef.RefTableId    ==  tableNum(OneMoreActionQueue)
        notexists join oneMoreActionQueue
            where docuRef.RefRecId == oneMoreActionQueue.RecId
        {
            docuRef.delete();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>