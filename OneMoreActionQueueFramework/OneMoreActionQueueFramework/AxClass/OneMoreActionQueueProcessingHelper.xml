<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OneMoreActionQueueProcessingHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// OneMore action queue helper class
/// </summary>
public static class OneMoreActionQueueProcessingHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processActionQueueInController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process action queue in controller class
    /// </summary>
    /// <param name = "_oneMoreActionQueue">An <c>OneMoreActionQueue</c> record</param>
    /// <param name = "_oneMoreActionQueueTypeTable">An <c>OneMoreActionQueueTypeTable</c> record</param>
    /// <param name = "_processingStage">An <c>OneMoreActionQueueProcessingStage</c> value</param>
    /// <param name = "_sysOperationExecutionMode">An <c>SysOperationExecutionMode</c> value</param>
    /// <param name = "_retryAttemptInterval">An <c>OneMoreActionQueueRetryAttemptInterval</c> value</param>
    [Hookable(false)]
    internal static void processActionQueueInController(OneMoreActionQueue _oneMoreActionQueue, OneMoreActionQueueTypeTable _oneMoreActionQueueTypeTable, OneMoreActionQueueProcessingStage _processingStage, SysOperationExecutionMode _sysOperationExecutionMode, OneMoreActionQueueRetryAttemptInterval _retryAttemptInterval = 0)
    {
        if (_processingStage == OneMoreActionQueueProcessingStage::Processing && _oneMoreActionQueueTypeTable.ProcessInSequence && _oneMoreActionQueue.hasPrevWaitingMessagesInQueue())
        {
            return;
        }

        str processingMethod;

        switch (_processingStage)
        {
            case OneMoreActionQueueProcessingStage::PreProcessing:
                processingMethod = methodStr(OneMoreActionQueueProcessingService, preProcessActionQueueRecord);
                break;
            case OneMoreActionQueueProcessingStage::Processing:
                processingMethod = methodStr(OneMoreActionQueueProcessingService, processActionQueueRecord);
                break;
            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
        
        SysOperationServiceController               controller = new SysOperationServiceController(classStr(OneMoreActionQueueProcessingService), processingMethod);

        OneMoreActionQueueProcessingSingleContract  contract = controller.getDataContractInfoObject().dataContractObject() as OneMoreActionQueueProcessingSingleContract;

        contract.parmActionQueueRecId(_oneMoreActionQueue.RecId);

        // Do not show the dialog and process the request directly.
        controller.parmShowDialog(false);

        LabelType dialogCaption;
        
        // Set the caption as it is used as the reliable async batch job name.
        if (_oneMoreActionQueueTypeTable.Description)
        {
            dialogCaption = strFmt('%1 (%2%3)', _oneMoreActionQueueTypeTable.Description, _processingStage == OneMoreActionQueueProcessingStage::PreProcessing ? strfmt('%1, ', "@OneMoreActionQueueFramework:OneMoreActionQueueProcessingStagePreProcessing") : '', _oneMoreActionQueue.ActionId);
        }
        else
        {
            dialogCaption = strfmt(_processingStage == OneMoreActionQueueProcessingStage::PreProcessing ? "@OneMoreActionQueueFramework:OneMoreActionQueuePreProcessAction" : "@OneMoreActionQueueFramework:OneMoreActionQueueRunAction", _oneMoreActionQueue.ActionId);
        }

        controller.parmDialogCaption(dialogCaption);

        controller.parmExecutionMode(_sysOperationExecutionMode);

        switch (_sysOperationExecutionMode)
        {
            case SysOperationExecutionMode::ReliableAsynchronous:
                ttsbegin;

                controller.parmReliableAsyncBatchGroupId(_oneMoreActionQueueTypeTable.ReliableAsyncBatchGroupId);
                
                BatchInfo batchInfo = controller.batchInfo();
                batchInfo.parmBatchHeader().parmStartDateTime(DateTimeUtil::addSeconds(batchInfo.parmBatchHeader().parmStartDateTime(), _retryAttemptInterval));
                
                if (_oneMoreActionQueueTypeTable.RunAsUserId)
                {
                    batchInfo.parmBatchHeader().parmExecutingBy(_oneMoreActionQueueTypeTable.RunAsUserId);
                }

                Batch batch;

                if (_oneMoreActionQueue.CompanyId)
                {
                    changecompany (_oneMoreActionQueue.CompanyId)
                    {
                        batch = controller.doBatch();
                    }
                }
                else
                {
                    batch = controller.doBatch();
                }

                OneMoreActionQueueBatchJobCorrelation::addCorrelation(_oneMoreActionQueue.RecId, batch.BatchJobId);

                ttscommit;
                break;
            default:
                controller.startOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOneMoreActionQueue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process <c>OneMoreActionQueue</c> record
    /// </summary>
    /// <param name = "_oneMoreActionQueueTypeTable"><c>OneMoreActionQueueTypeTable</c> record</param>
    /// <param name = "_oneMoreActionQueue"><c>OneMoreActionQueue</c> record</param>
    /// <param name = "_processingType">An <c>OneMoreActionQueueProcessingType</c> value</param>
    /// <param name = "_isInTransaction">Is in tranasction</param>
    /// <returns><c>OneMoreActionQueueServiceRunActionResponse</c></returns>
    [Hookable(false)]
    internal static OneMoreActionQueueServiceRunActionResponse processOneMoreActionQueue(OneMoreActionQueueTypeTable _oneMoreActionQueueTypeTable, OneMoreActionQueue _oneMoreActionQueue, OneMoreActionQueueProcessingType _processingType = _oneMoreActionQueueTypeTable.ProcessingType, boolean _isInTransaction = false)
    {
        OneMoreActionQueueResponseType                          responseType = OneMoreActionQueueResponseType::OK;
        str                                                     notes;
        OneMoreActionQueueServiceRunActionResponse              response = new OneMoreActionQueueServiceRunActionResponse();
        boolean                                                 skipProcessing;
        
        if (_oneMoreActionQueueTypeTable.Enabled && _oneMoreActionQueue.RecId != 0)
        {
            if (_oneMoreActionQueue.Status == OneMoreActionQueueStatus::NotRun)
            {
                OneMoreActionQueueProcessingHelper::processActionQueueInController(_oneMoreActionQueue, _oneMoreActionQueueTypeTable, OneMoreActionQueueProcessingStage::PreProcessing, _isInTransaction ? SysOperationExecutionMode::ReliableAsynchronous : SysOperationExecutionMode::Synchronous);

                if (_isInTransaction)
                {
                    skipProcessing = true;
                }
            }

            if (!skipProcessing)
            {
                _oneMoreActionQueue.reread();
        
                if (_oneMoreActionQueue.Status != OneMoreActionQueueStatus::Error)
                {
                    switch (_processingType)
                    {
                        case OneMoreActionQueueProcessingType::ReliableAsynchronous:
                            OneMoreActionQueueProcessingHelper::processActionQueueInController(_oneMoreActionQueue, _oneMoreActionQueueTypeTable, OneMoreActionQueueProcessingStage::Processing, SysOperationExecutionMode::ReliableAsynchronous);
                            break;

                        case OneMoreActionQueueProcessingType::Synchronous:
                            try
                            {
                                OneMoreActionQueueProcessingHelper::processActionQueueInController(_oneMoreActionQueue, _oneMoreActionQueueTypeTable, OneMoreActionQueueProcessingStage::Processing, SysOperationExecutionMode::Synchronous);
                            }
                            catch
                            {
                                exceptionTextFallThrough();
                            }
                            finally
                            {
                                _oneMoreActionQueue.reread();

                                switch (_oneMoreActionQueue.Status)
                                {
                                    case OneMoreActionQueueStatus::Processed:
                                        responseType = OneMoreActionQueueResponseType::OK;
                                        notes = _oneMoreActionQueue.ProcessingNotes;
                                        break;

                                    default:
                                        responseType = OneMoreActionQueueResponseType::Error;
                                        notes = _oneMoreActionQueue.ProcessingNotes;
                                }
                            }
                            break;
                    }
                }
            }
        }
        else
        {
            notes = strFmt("@OneMoreActionQueueFramework:OneMoreActionQueueActionTypeIsNotEnabled", _oneMoreActionQueueTypeTable.TypeId);
            responseType = OneMoreActionQueueResponseType::Warning;
        }

        response.parmResponseType(responseType);
        response.parmNotes(notes);

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExceptionRecoverable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if exception is recoverable and retry is needed
    /// </summary>
    /// <param name = "_exception">An <c>System.Exception</c> object</param>
    /// <returns>True if exception si recoverable otherwise False</returns>
    [Hookable(false)]
    public static boolean isExceptionRecoverable(System.Exception _exception)
    {
        boolean     ret;

        if (   _exception is Microsoft.Dynamics.Ax.Xpp.DeadlockException
            || _exception is Microsoft.Dynamics.Ax.Xpp.UpdateConflictException
            || _exception is Microsoft.Dynamics.Ax.Xpp.UpdateConflictNotRecoveredException
            || _exception is Microsoft.Dynamics.Ax.Xpp.DuplicateKeyException
            || _exception is Microsoft.Dynamics.Ax.Xpp.DuplicateKeyNotRecoveredException
            || _exception is Microsoft.Dynamics.Ax.Xpp.MaximumRetryCountExceededException
           )
        {
            ret = true;
        }
        else
        {
            ret = OneMoreActionQueueContext::doRetryFlag;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>